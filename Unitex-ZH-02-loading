\chapter{加载文本}
\label{chap-text}

\noindent\ Unitex 的一个主要功能是搜索文本表达式。要做到这一点，文本需要经过一系列处理使之成为规范化且无歧义的形式，以及拆分成句子的步骤。一旦这些操作被执行后，电子词典随即加载入文本中，从而可以通过许多语法使搜索文本更有效。


\bigskip
\noindent 本章介绍了文本处理的几个步骤。


\section{选择语言}
\index{选择语言}
\noindent 当你启动\ Unitex 时，程序需要你选择操作的语言 (见图~\ref{fig-language-selection})。 程序显示的语言既在系统目录里也在你的工作目录里。在你第一次使用某一种语言时，Unitex 将系统目录下的该语言文件拷贝至你的工作目录，从而节约硬盘存储空间。


\bigskip
\noindent 警告：如果你的工作目录里已经有了给定的语言，Unitex 不会将系统数据复制至其中。因此，如果某次更新修改过资源文件或者字典，你需要自行拷贝该文件至你的工作目录，或者删除你工作目录下的该语言文件，让\ Unitex 重新建立目录。


\bigskip
\noindent 
选择语言可以使\ Unitex 找到对应的文件，例如字母表文件。 \index{字母表!文件} 你可以在任何时候通过点击菜单栏“文本”中的“改变语言”来实现更换语言。 如果你更换了语言，程序会关闭所有和当前文本有关的窗口，如果它有的话。 当前的语言显示在标题栏的图像界面上。


\begin{figure}[!h]
\begin{center}
\includegraphics[width=6.2cm]{resources/img/fig2-1.png}
\caption{\label{fig-language-selection}启动\ Unitex 时的选择语言界面}
\end{center}
\end{figure}


\section{规范文本}
\label{section-conversion-texte-unicode}
\index{规范!文本}
\index{Corpus|see{Texte}}
\index{Unicode}
\ Unitex 作用于\ Unicode编码的文本，而\ Unicode是全球文本编码的标准。 每个字符都其唯一的代码,从而可以不受操作系统和不同机器码限制地显示文本。\ Unitex  使用两个字节的编码表示方式，即Unicode 3.0标准,也称为\ Unicode Little-Endian (详见
\cite{UNICODE})。

\bigskip
\index{文件!译码}
\noindent 进入\ Unitex 的文本必须是\ Unicode格式。 如果你尝试加载非\ Unicode格式的文本，程序将会建议你转换 
(见图~\ref{auto-transcoding})。这个转换是根据当前语言而来的：如果你用法语工作，\ Unitex 会转换你的文字\footnote{Unitex同时也会建议非\ Unicode Little-Endian 的字典与图像进行自动转换。}，通过假设它是用法语编码而成的。\ Unitex会默认建议你去替换原文件或是重命名原文件，在拓展名的开头加入
\ \verb$.old$。例如有一个 ASCII 文件\ \verb$biniou.txt$,
转换进程会复制这个 ASCII 文件并重命名为\ \verb$biniou.old.txt$，或者用对应的 Unicode 来替换\ \verb$biniou.txt$ 的内容。

\begin{figure}[!h]
\begin{center}
\includegraphics[width=10cm]{resources/img/fig2-2.png}
\caption{\label{auto-transcoding}非\ Unicode 文本的自动转换}
\end{center}
\end{figure}

\bigskip
\noindent 如果默认建议的编码不正确或者你想要不用，\ \verb$.old$来重命名这个文件，你可以使用菜单栏中“编辑”下的“译码”。这个命令可以让你选择要转换文章的原始编码和目标编码 (见图~\ref{transcoding})。 源代码默认和当前语言有关，而目标编码是 
\ Unicode Little-Endian。你可以通过选择任意源码和目标编码来改变这个选择。因此，你可以将你想要的数据转换成其他编码，比如你想做网页时使用\ UTF-8编码。“添加文件”按钮可以让你选择需要转换的文件。“移除文件”按钮能清空误选的文件列表。“译码”按钮将转换所有的文件。如果在处理文件时出现问题（比如给一个文件已经是\ Unicode了），程序会继续处理下一个文件。


\begin{figure}[!h]
\begin{center}
\includegraphics[width=12cm]{resources/img/fig2-3.png}
\caption{\label{transcoding}文件转换}
\end{center}
\end{figure}

\noindent 为了得到文本的正确形式，你可以同样使用文本处理就像\ Libre OpenOffice.org (\cite{OpenOffice})  或者 \ Microsoft Word ，以“Unicode文本”的形式保存你的文件。如果你用\ OpenOffice Writer 软件的话, 你应选择
“Coded Text (*.txt)”格式 然后再激活的窗口上选择“Unicode”编码，如图~\ref{OfficeWriter}所示。

\begin{figure}[!h]
\begin{center}
\includegraphics[width=12.5cm]{resources/img/fig2-4.png}
\caption{\label{OfficeWriter}在\ OpenOffice Writer 中以Unicode来储存文本}
\end{center}
\end{figure}

\noindent 一台PC默认建议编码总是\ Unicode Little-Endian。它的编码不具有任何格式信息 (字体、颜色等)，因而它可以被\ Unitex 使用。

\bigskip
\noindent 
通过菜单栏“信息”下的“偏好”内的"编码"标签，你可以将默认的编码改成\ UTF16LE、\ UTF16BE 或\  UTF8。这个编码只对当前语言有效。

\begin{figure}[!h]
\begin{center}
\includegraphics[width=10cm]{resources/img/fig2-5.png}
\caption{对当前语言选择默认编码}
\end{center}
\end{figure}

% For small files...
\section{编辑文本}
通过菜单栏的“文件编辑”中的“打开”，你也可以使用\ Unitex 的文本编辑器。这个编辑器有文本查找替换的功能，也内置了\ Unitex 的字典。点击“搜索”按钮即可使用。你会看见窗口分成三个小部分。“搜索”部分与常用搜索操作相似。如果你将一篇文章拆分成句子，你可以在“搜索句子”这部分里使用句子编号来搜索。最后，“搜索字典”部分如图~\ref{dictionary-search}所示，可以让你使用电子词典的有关操作。总的来说，即使词尾有变化，词形有变化或是符合语义学和语法学的编码都可以搜索。因此，如果你想要搜索所有带有“及物”（\ \verb$t$）特征的动词，你只需要点击“语法学的编码”然后搜索“及物”（\ \verb$t$）。你将会得到除了“及物”（\verb$t$）这个词以外的所有的及物动词。


\begin{figure}[!h]
\begin{center}
\includegraphics[width=15cm]{resources/img/fig2-6.png}
\caption{在电子词典中搜索及物动词（\texttt{t}）\label{dictionary-search}}
\end{center}
\end{figure}


\section{打开文本}
\noindent\ Unitex 可以打开两种类型的文本文件。 \index{文件!文本}
具有\ \verb+.snt+ 拓展名的文件是\ Unitex 的预处理文本文件，可以被不同系统功能控制。具有\ \verb+.txt+ 拓展名的文件是原始文件。你可以点击菜单栏“文本”中的“打开”来打开\verb+.txt+文件。


\begin{figure}[!h]
\begin{center}
\includegraphics[width=14cm]{resources/img/fig2-7.png}
\caption{文本菜单}
\end{center}
\end{figure}

\begin{figure}[!h]
\begin{center}
\includegraphics[width=13cm]{resources/img/fig2-8.png}
\caption{打开Unicode编码的文本}
\end{center}
\end{figure}



\section{文本的预处理}
\index{文本!预处理}
\noindent 一旦选好文本，\ Unitex  就建议你进行预处理。预处理包含以下操作：分隔符的规范化，将文本拆分成句子，规范没有歧义的表达，将句子拆开，并加载字典。如果你拒绝对文本进行预处理，它将不会规范化，以及不能按语义分离，因此\ Unitex 不能处理这些表达式。不过你总是可以自行点击菜单栏“文本”中的“预处理”来实现这个操作。


\begin{figure}[!h]
\begin{center}
\includegraphics[width=15cm]{resources/img/fig2-9.png}
\caption{预处理界面\label{fig-preprocessing-frame}}
\end{center}
\end{figure}

\bigskip
\noindent 
如果你选择预处理，\ Unitex 会让你选择参数，见图~\ref{fig-preprocessing-frame}。选项"Apply FST2 in MERGE mode"用来把文本拆成句子。选项"Apply FST2 in REPLACE mode"用来替换文本，尤其可以用作规范没有歧义的表达。选项"Apply All default Dictionaries" 可以让你在\ DELA(Dictionnaires Electroniques du LADL)格式里使用字典。 \index{DELA}选项"Analyse unknown words as free 
compound words"用在挪威语上，通过从词的简单形式的组合上进行正确分析词的自由组合形式。最后，选项"Construct Text Automaton"用来创建文本自动机。这个选项是默认关闭的，因为转换过长的文章需要占据大量内存和硬盘空间。构造文本自动机在第~\ref{chap-text-automaton}章会详细介绍。

\bigskip
\noindent 注意：如果你点击"Cancel but tokenize text",程序将处理所有的分隔符并按语义分离；点击 "Cancel
and close text"可以取消操作。


\subsection{分隔符处理}
\index{规范!分隔符}\index{单词分隔符}\index{文本!规范化}
标准的分隔符有空格，tab和回车。许多分隔符会连续出现，然而它对语言分析没有任何作用。我们通过以下几条方法来规范分隔符：

\begin{itemize}
  \item 一系列的连续分隔符中包含至少一个回车，我们用一个回车即可来替代它们。
  \item 其余的连续分隔符，我们用一个空格来替换它们。
\end{itemize}

\bigskip
\noindent 
为了区分空格和回车，程序每步都会把它们储存下来，因为它们会在把文本分离成句子的过程中互相影响。规范\  \verb+mon_texte.txt+ 后的结果与\ \verb+.txt+ 处于同一目录下，且命名为\ \verb+mon_texte.snt+。 \index{Fichier!\verb+.snt+}

\bigskip
\noindent 注意~: 当我们使用图形界面处理一篇文章时，一个叫

% do not remove this line jump 
\noindent \ \verb+mon_texte.snt+ 的目录在规范化后马上被创建。这个目录是文本目录， \index{文本!目录}\index{目录!文本}包含了和这个文章所有有关的数据。



\subsection{拆分成句子}
\label{section-sentence-splitting}
\index{拆!句子}\index{文本!拆成句子}
\index{语法!拆成句子}
将文本拆成句子是预处理的重要一步，因为它决定了语言处理的单元。这个拆分用来给程序创造文本自动机。和我们想法不同的的是，程序处理句子中的限制不容易。请考虑以下法语短句：


\bigskip
\textit{La famille a appelé le Dr. Martin en urgence.}

\bigskip \noindent  \textit 缩写词\ {Dr} 后有个点，有个大写字母。如果把这个点当句号，而不是当成一个缩写标志的话，会产生错误。为了避免这种因加标点而产生的歧义现象，我们使用语法来判别句子结束的标志。图~\ref{fig-example-sentence-splitting} 展示了一个用语法来拆分句子的例子。

\begin{figure}[!h]
\begin{center}
\includegraphics[width=15cm]{resources/img/fig2-10.pdf}
\caption{用语法拆分法语句子
\label{fig-example-sentence-splitting}}
\end{center}
\end{figure}

\noindent  当一条语法路径识别出这个序列或者当它产生句子分隔符\ \verb+{S}+\index{\verb+{S}+}\index{句子分隔符},
我们把这个标识符插入文章。比如，如图~\ref{fig-example-sentence-splitting} 中的语法路径识别出这个序列中有问号和大写字母，于是在问号后插入
\verb+{S}+ 标识符。如下文本所示：


\bigskip
\textit{现在几点？八点。}

\bigskip
\noindent 变成：

\bigskip
\textit{现在几点？\{S\} 八点。}

\bigskip
\noindent 语法标识符有以下几种特殊标记与准特殊标记：

\index{\verb+<E>+}\index{Epsilon|see{<E>}}
\index{\verb+<MOT>+}\index{\verb+<MIN>+}\index{\verb+<MAJ>+}\index{\verb+<PRE>+}\index{\verb+<NB>+}
\index{\verb+<PNC>+}\index{\verb+<^>+}\index{\verb+#+}\index{\verb+<WORD>+}\index{\verb+<UPPER>+}\index{Méta-symboles}
\index{\verb+<LOWER>+}\index{\verb+<FIRST>+}
\begin{itemize}
  \item \verb+<E>+~: 空词,可以辨识出空序列~;
  \item \verb+<WORD>+~: 辨识出任意字母序列~;
  \item \verb+<LOWER>+~: 辨识出任意小写字母序列~;
  \item \verb+<UPPER>+~: 辨识出任意大写字母序列~;
  \item \verb+<FIRST>+~: 辨识出任意首字母大写序列~;
  \item \verb+<NB>+~: 辨识出任意相邻数字序列 (可辨出1234，而1 234则不行)~; 
  \item \verb+<PNC>+~: 辨识出标点符号 ; , ! ? 还有西班牙语的问号和感叹号还有一些亚洲的标点符号~;
  \item <\verb+^+>~: 辨识出回车~;
  \item \verb+#+~: 禁止空格出现。
\end{itemize}

\noindent  我们早期并未使用 \verb+<WORD>+, \verb+<LOWER>+, \verb+<UPPER>+ 和 \verb+<FIRST>+ 而是用 \verb+<MOT>+, \verb+<MIN>+, \verb+<MAJ>+ 和 \verb+<PRE>+。
 现有的图标系统中仍然能使用这些标识符，但是它们现在贬值了。也就是说为了当前版本\footnote{从3.1bêta版本起, 版本号4072，2015年10月2日}的功能尽量避免去用它们,
防止增加没用的语言标识符的数量。

\bigskip
\noindent 我们默认空格是出现在两个框之中的。但是我们可以增加\ \verb+#+符号来禁止空格的出现。同时，如果你想强制出现空格，你需要加上\ \verb+" "+。此外，大小写字母在字母表文件中定义过 \index{文件!字母表}\index{字母表}
(详见第~\ref{chap-file-formats}章)。你可以参考第~\ref{chap-grammars}章来得到更多图像的信息。语法上的细节，详见第 \cite{ameliorer-decoupage-en-phrases}章。所用语法的名称\ \verb+Sentence.fst2+ 以及用法可以在该目录下获取~:\index{Fichier!\verb+Sentence.fst2+}

\bigskip
\verb+/(répertoire personnel)/(langue)/Graphs/Preprocessing/Sentence+

\bigskip
\noindent 这个语法将应用\ \verb+Fst2Txt+\index{\verb+Fst2Txt+}\index{Programmes externes!\verb+Fst2Txt+}程序来用 MERGE.\index{MERGE}模式处理文本。这个模式影响了语法处理后的输出结果。在这个模式下\verb+{S}+会插入文本。程序需要一个\verb+.snt+文件并修改它。


\subsection{处理没有歧义的形式}
\index{规范!没有歧义的形式}
\index{语法!规范化!没有歧义的形式}

文本中的许多形式可以被简化（比如说，法语中"\ \textit{l'on} "可以替换成"\ \textit{on} ")。你可以根据你的需要来替换这些形式。然而，你需要特别注意这种形式需要是没有歧义的。


\bigskip
\noindent 如果我们用"\ \textit{à le-dit} "形式来替换这个"\ \textit{audit} ",
在下句中：

\bigskip
\textit{La cour a procédé à un audit des comptes de cette société.}

\bigskip
\noindent 将会变成如下错误的句子 :

\bigskip
\textit{La cour a procédé à un à le-dit des comptes de cette société.}

\bigskip
\noindent 使用此功能需要谨慎。此外空格必须考虑在内。比如说，我们用"\ \textit{ce} "替换"\ \textit{c’} "，期间不增加空格，则下句：

\bigskip
\textit{Est-ce que c’était toi ?}

\bigskip
\noindent 将会变成如下错误的句子:

\bigskip
\textit{Est-ce que ce était toi ?}

%\bigskip
%\noindent 为了避免这个问题，我们用
%\textit{i.e.} "\ \textit{ce} " 来替换 "\ \textit{ c'} "。

\bigskip
\noindent 可在规范化时用的符号与分割句子的语法中使用的符号一致。这个语法文件命名为
\ \verb+Replace.fst2+ 且在以下目录可被找到~:

\bigskip \verb+/(répertoire personnel)/(langue)/Graphs/Preprocessing/Replace+

\bigskip
\noindent 和分割句子一致的是，这个语法也用\ \verb+Fst2Txt+ 程序 \index{外部程序!\verb+Fst2Txt+}\index{\verb+Fst2Txt+},不过这次使用的是REPLACE模式，这个模式表示的是能被识别的输入的句子会被输出的句子所替换。如~\ref{fig-normalization-grammar}图所示的是一个规范英语动词的语法。

\begin{figure}[!p]
\begin{center}
\includegraphics[height=17cm,angle=90]{resources/img/fig2-11.pdf}
\caption{规范英语动词的语法\label{fig-normalization-grammar}}
\end{center}
\end{figure}



\subsection{文本拆分成词项}
\index{文本!拆分成词项}
\index{拆分!词项}
\index{词项}\index{符号化}
\label{tokenization}
一些语言，尤其是亚洲的语言中，会使用一些不同于西方语言的操作符。空格可能是禁止的，也可能是有条件的，或者必须的。为了更好处理这些特殊情况，\ Unitex 在拆分文本上，对一个语言使用特定的方法。比如，法语就如下主要规则来处理：

\bigskip
\noindent 主要分隔符可能是:
\begin{itemize}
  \item 句子限制符 \verb+{S}+；
  \item 停止标志 \verb+{STOP}+.\index{\verb${STOP}$} 与\verb+{S}+不同的是, \verb+{STOP}+标志将不会被语法识别，这用来捆绑一些句子成分；
  \item 一个词法标记 \verb+{aujourd'hui,.ADV}+;
  \item 一串相邻字母 (在字母表中定义的字母);
  \index{文件!字母表}
  \item 一个(只能有一个)字母非字母的符号，比如所有不再当前字母表文件中定义的字符；如果它是一个回车，则用空格代替。
\end{itemize}

\bigskip
\noindent 对于其他语言来说，分隔符是一个字符一个字符处理的，除了\ \verb+{S}+ 标志，\ \verb+{STOP}+ 标志以及语言标记。这些简单的符号化是\ Unitex 的基础功能，但是它限制了搜索操作的理想情况。


\bigskip
\noindent 无论什么分割模式，文本中的回车总被空格取代。分割操作由\ 
\verb+Tokenize+\index{\verb+Tokenize+} \index{Programmes externes!\verb+Tokenize+} 来执行。这个程序会在存放文本的文件夹下新建许多文件~:
\begin{itemize}
  \item \verb+tokens.txt+包含了在文本中按顺序搜索到的分隔符。\index{文件!\verb+tokens.txt+}
  \item \verb+text.cod+包含了一个整形数组。每个数字对应\verb+tokens.txt+文件中符号在文中的索引;
  \index{文件!\verb+text.cod+}
  \item \verb+tok_by_freq.txt+包含了一个按使用频率来排序的词项表；
  \index{文件!\verb+tok_by_freq.txt+}
  \item \verb+tok_by_alph.txt+包含了一个按字母来排序的词项表；
  \index{文件!\verb+tok_by_alph.txt+}
\item \verb+stats.n+ 包含一些文本数据。
\index{文件!\verb+stats.n+}
\end{itemize}

\bigskip
\noindent 分割文章 :

\bigskip
\textit{Un sou c’est un sou.}

\bigskip
\noindent 返回这样的分隔符列表: \ \textit{Un} 空格 \ \textit{sou c ’ est un
.}

\bigskip
\noindent 你观察到标志化是一个较精细的操作(Un 和 un 是两个不同的标志)，每个标志只出现了一次。把这些标记用0到5来编号,
这段文字用数字可以用下表表示：

\bigskip
\begin{table}[h]
\begin{center}
\begin{tabular}{|p{2.8cm}||c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
标记编号             & 0 & 1 & 2 & 1 & 3 & 1 & 4 & 1 & 2 & 5
\\
\hline
对应语言 & \textit{UN} &   & \textit{sou} &   & \textit{est} &  & \textit{un}
& & \textit{sou} & \textit{.}
\\
\hline
\end{tabular}
\caption{文本\ \textit{Un sou c’est un sou.} 的表示}
\end{center}
\end{table}

\bigskip
\noindent 详见第~\ref{chap-file-formats}章。

\begin{figure}[!h]
\begin{center}
\includegraphics[height=10cm]{resources/img/fig2-12.png}
\caption{一篇英语文章的词汇分析，并按顺序显示}
\end{center}
\end{figure}



\subsection{使用字典}
\label{text-applying-dictionaries}
\index{字典!应用}
\index{资源!语言|见{字典}}
字典的应用由子字典中的原型组成。搜索法语短语\ \textit{Igor mange une pomme de terre} 的结果如下：
\index{词!单词}

\bigskip
\begin{verbatim}
de,.DET+z1
de,.PREP+z1
de,.XI+z1
mange,manger.V+z1:P1s:P3s:S1s:S3s:Y2s
pomme,.A+z1:ms:fs:mp:fp
pomme,.N+z1:fs
pomme,pommer.V+z3:P1s:P3s:S1s:S3s:Y2s
terre,.N+z1:fs
terre,terrer.V+z1:P1s:P3s:S1s:S3s:Y2s
une,.N+z1:fs
une,un.DET+z1:fs
\end{verbatim}

\bigskip
\noindent 同时，程序识别出以下词组
:\index{词!词组}

\bigskip
\begin{verbatim}
pomme de terre,.N+z1:fs
\end{verbatim}

\bigskip
\noindent 短语\ \textit{Igor}既不是法语单词，也不是法语词组，所以它被认为是生词。\index{词!生词}字典应用 \verb+Dico+. \index{\verb+Dico+}\index{外部程序!\verb+Dico+}程序来处理。三个文件(\verb+dlf+ 储存单词, \  \verb+dlc+ 储存词组 ，以及\verb+err+ 储存生词)将在文本目录下被新建。 我们把\ \verb+dlf+ 文件及\ \verb+dlc+ 文件成为字典文本。
\index{字典!文本}
\index{文件!\verb+dlf+}
\index{文件!\verb+dlc+}\index{文件!\verb+err+}

\bigskip
\noindent 一旦加载字典完毕后，\ Unitex 会按顺序在一个窗口中显示单词、词组以及生词。图~\ref{fig-Dico-application-results}显示了处理一篇英语文章的结果。

\begin{figure}[!ht]
\begin{center}
\includegraphics[width=12cm]{resources/img/fig2-13.png}
\caption{使用词典后的英文文本结果\label{fig-Dico-application-results}}
\end{center}
\end{figure}

\bigskip
\noindent 通过点击菜单栏“文本”下的"添加语言资源..."按钮，我们同样可以不在预处理时运用字典。Unitex 会显示一个窗口(见图 ~\ref{fig-Dico-configuration}) 供你选择可以应用的字典。


\begin{figure}[!ht]
\begin{center}
\includegraphics[width=10cm]{resources/img/fig2-14.png}
\caption{词典的运行参数\label{fig-Dico-configuration}}
\end{center}
\end{figure}

\bigskip
\noindent “用户资源”列表会显示在用户目录\ \verb+(langue)/Dela+ 下的所有\ \verb+.bin+ 以及\ \verb+.fst2+ 拓展名的字典。系统字典在“系统目录”下。<Ctrl+左键>可以让你同时使用多种字典。系统字典已经默认被安装。你可以选择用户字典以及系统字典的顺序通过上下箭头。(见图\ref{fig-Dico-configuration})。“设置默认值”按钮可以让当前选择默认选项。如果你已经点击过了“应用所有默认字典”，这个选项也同样作用于预处理。 \index{字典!选择默认}
如果你右击字典名字，字典的介绍会随即显示，只要它存在。

\subsection{荷兰语、德语、挪威语，俄罗斯语词组分析}
\index{Norvégien!mots composés libres}
\index{Allemand!mots composés libres}
\index{Néerlandais!mots composés libres}
\index{Russe!mots composés libres}
\index{Analyse des mots composés libres!langues germaniques}
\index{Mots!composés libres!langues germaniques}
\index{Analyse des mots composés libres!russe}
\index{Mots!composés libres!russe}

\label{section-Norwegian-compound-words}
在有些语言比如挪威语中，词组可能含有他们的元素。比如，单词\ \textit{aftenblad} 表示\ \textit{journal du soir}是 \ \textit{aften} (\textit{soir})和 \textit{blad}
(\textit{journal})的结合。\verb+PolyLex+ \index{\verb+PolyLex+}程序\index{外部程序!\verb+PolyLex+}返回一个生词列表并且尝试分析有没有可能是一个组合词。如果能分析出至少一种可能性，程序就会分会一个列表并加入单词词典。

\section{打开被标记的文本}
文本标记是大括号里的文本语法注释。比如说下句：

\bigskip
\textit{I do not like the \{square bracket,.N\} sign! \{S\}}

\bigskip
\noindent 这个标记可以防止歧义，并可以防止其他干扰。在我们这个例子中，我们不会把square 当成两个单词来认识。


\bigskip
\noindent 然而，这些标记可能会影响文章的预处理。不过用户可以通过点击菜单“文本”下的“打开含标签的文本”使文本的预处理不受影响，如图\ref{preprocess-tagged-text}所示。

\bigskip
\begin{figure}[!h]
\begin{center}
\includegraphics[width=14cm]{resources/img/fig2-15.png}
\caption{预处理被标记的文本\label{preprocess-tagged-text}}
\end{center}
\end{figure}

